<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:Signals.ViewModels"
             xmlns:lang="clr-namespace:Signals.Resources"
             xmlns:controls="clr-namespace:Signals.Controls"
             x:Class="Signals.Views.MainView"
             x:DataType="vm:MainViewModel">

    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
         to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainViewModel />
    </Design.DataContext>

    <!-- Note: Using icon fonts from https://phosphoricons.com/ for certain icons -->
    <Grid RowDefinitions="Auto, *, Auto" Margin="20">

        <!-- Application Header: Contains App Title and tagline ($ignalS Watch what happens) -->
        <StackPanel Grid.Row="0">
            <TextBlock Classes="title" Text="{x:Static lang:Resources.AppTitle}" />
            <TextBlock Classes="tag-line" Text="{x:Static lang:Resources.TagLine}" />

            <!-- App Content Container Border -->
            <Border Classes="app-header">
                <Grid ColumnDefinitions="*, Auto">
                    <TextBlock Grid.Column="0" Classes="page-title" FontSize="24" Text="{Binding PageTitle}" />
                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                        
                        <!-- Add button - brings up the dialog to add a new StockItem -->
                        <Button Grid.Column="1" Classes="navigation" Background="Transparent"
                                HorizontalAlignment="Right"
                                Command="{Binding GoToAddItemCommand}">
                            <StackPanel>
                                <Label Classes="icon" FontSize="24" Content="&#xe3D6;"
                                       Padding="0 0 0 0">
                                </Label>
                            </StackPanel>
                        </Button>
                        
                        <!--Ellipsis Menu-->
                        <Menu>
                            <MenuItem Background="Transparent">
                                <MenuItem.Header>
                                    <StackPanel>
                                        <Label Classes="icon navigation" FontSize="24" Content="&#xe206;"
                                               Background="Transparent" Padding="0 5 0 0">
                                        </Label>
                                    </StackPanel>
                                </MenuItem.Header>
                                <MenuItem Header="About" Command="{Binding GotoAboutCommand}"></MenuItem>
                                <MenuItem Header="Updates" Command="{Binding GotoUpdatesCommand}"></MenuItem>
                                <MenuItem Header="Log" Command="{Binding GotoQuoteLogCommand}"></MenuItem>
                            </MenuItem>
                        </Menu>
                    </StackPanel>
                </Grid>
            </Border>
        </StackPanel>

        <!-- Main part -->
        <Border Grid.Row="1" Classes="main-section">
            <Grid>
                <!-- Content control provides the container for the view corresponding to the last selected ViewModel -->
                <ContentControl Content="{Binding CurrentPage}"
                                Foreground="{DynamicResource PrimaryForeground}"
                                VerticalAlignment="Stretch" Margin="5">
                </ContentControl>
            </Grid>
        </Border>

        <!-- Bottom Bar -->
        <Border Grid.Row="2" Classes="footer" CornerRadius="0,0,10,10" Background="Black">
            <Grid Grid.Row="2" ColumnDefinitions="*, Auto">
                <!-- Navigation Buttons -->
                <StackPanel Orientation="Horizontal">
                    <Button Classes="navigation" Command="{Binding GoToHomeCommand}">
                        <StackPanel>
                            <Label Classes="icon" Content="&#xe2c6;">
                            </Label>
                            <Label Content="Home"></Label>
                        </StackPanel>
                    </Button>
                    <Button Classes="navigation" Command="{Binding GoToWatchlistCommand}">
                        <StackPanel>
                            <Label Classes="icon" Content="&#xe220;">
                            </Label>
                            <Label Content="Watchlist"></Label>
                        </StackPanel>
                    </Button>
                    <Button Classes="navigation" Command="{Binding GoToHoldingsCommand}">
                        <StackPanel>
                            <Label Classes="icon" Content="&#xea8c;"></Label>
                            <Label Content="Holdings"></Label>
                        </StackPanel>
                    </Button>
                </StackPanel>
                <StackPanel Grid.Column="1">
                    <!-- Settings Button -->
                    <Button Classes="navigation" Background="Transparent" Command="{Binding GoToSettingsCommand}">
                        <StackPanel>
                            <Label Classes="icon" Content="&#xe272;"></Label>
                            <Label Content="Settings"></Label>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Grid>
        </Border>
         
        <!-- Dialog Control: The standard Windows dialog won't work in a mobile app.  The standard technique is
             to use an overlay. Placed here in the main view - Hoping it can be displayed from any page -->
        <Grid Grid.Row="0" Grid.RowSpan="3"
              IsVisible="{Binding Dialog.IsDialogOpen, FallbackValue=false}">
            <Border Background="Black" Opacity="0.5" CornerRadius="10"></Border>
            <ContentControl Content="{Binding Dialog}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            />
        </Grid>
    </Grid>

</UserControl>